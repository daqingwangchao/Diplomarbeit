/* Automatically generated by p4c-ebpf from protocolClassifier.p4 on Wed Sep  4 14:49:50 2024
 */
#ifndef _P4_GEN_HEADER_
#define _P4_GEN_HEADER_
#include "ebpf_kernel.h"

#define MAP_PATH "/sys/fs/bpf/tc/globals"
struct ethernet_t {
    u64 dstAddr; /* macAddr_t */
    u64 srcAddr; /* macAddr_t */
    u16 etherType; /* bit<16> */
    u8 ebpf_valid;
};

struct ipv4_t {
    u8 version; /* bit<4> */
    u8 ihl; /* bit<4> */
    u8 diffserv; /* bit<8> */
    u16 totalLen; /* bit<16> */
    u16 identification; /* bit<16> */
    u8 flags; /* bit<3> */
    u16 fragOffset; /* bit<13> */
    u8 ttl; /* bit<8> */
    u8 protocol; /* bit<8> */
    u16 hdrChecksum; /* bit<16> */
    u32 srcAddr; /* ip4Addr_t */
    u32 dstAddr; /* ip4Addr_t */
    u8 ebpf_valid;
};

struct headers {
    struct ethernet_t ethernet; /* ethernet_t */
    struct ipv4_t ipv4; /* ipv4_t */
};

struct MyFilter_ipv4_classifier_key {
    u8 field0; /* hdr.ipv4.protocol */
} __attribute__((aligned(4)));
#define MYFILTER_IPV4_CLASSIFIER_ACT_MYFILTER_COUNT_PACKET 1
struct MyFilter_ipv4_classifier_value {
    unsigned int action;
    union {
        struct {
        } _NoAction;
        struct {
            u32 index;
        } MyFilter_count_packet;
    } u;
};
#if CONTROL_PLANE
static void init_tables() 
{
    u32 ebpf_zero = 0;
    {
        int tableFileDescriptor = BPF_OBJ_GET(MAP_PATH "/MyFilter_ipv4_classifier_defaultAction");
        if (tableFileDescriptor < 0) { fprintf(stderr, "map MyFilter_ipv4_classifier_defaultAction not loaded\n"); exit(1); }
        struct MyFilter_ipv4_classifier_value value = {
            .action = MYFILTER_IPV4_CLASSIFIER_ACT_MYFILTER_COUNT_PACKET,
            .u = {.MyFilter_count_packet = {255,}},
        };
        int ok = BPF_USER_MAP_UPDATE_ELEM(tableFileDescriptor, &ebpf_zero, &value, BPF_ANY);
        if (ok != 0) { perror("Could not write in MyFilter_ipv4_classifier_defaultAction"); exit(1); }
    }
}
#endif
#endif
